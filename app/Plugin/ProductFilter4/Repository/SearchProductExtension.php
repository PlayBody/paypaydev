<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\ProductFilter4\Repository;


use Doctrine\ORM\QueryBuilder;
use Eccube\Doctrine\Query\QueryCustomizer;
use Eccube\Repository\QueryKey;
use Eccube\Request\Context;
use Eccube\Repository\ProductTagRepository;
use Eccube\Repository\ProductClassRepository;

/**
 * ProductClassRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SearchProductExtension implements QueryCustomizer
{
    /**
     * @var Context
     */
    private $context;

    /**
     * @var ProductTagRepository
     */
    private $productTagRepository;

    /**
     * @var ProductClassRepository
     */
    private $productClassRepository;

    /**
     * ProductListWhereCustomizer constructor.
     *
     * @param ProductTagRepository $productTagRepository
     * @param ProductClassRepository $productClassRepository
     * @param Context $context
     */
    public function __construct(Context $context, ProductTagRepository $productTagRepository, ProductClassRepository $productClassRepository)
    {
        $this->context = $context;
        $this->productTagRepository = $productTagRepository;
        $this->productClassRepository = $productClassRepository;
    }

    /**
     * {@inheritdoc}
     */
    public function customize(QueryBuilder $builder, $params, $queryKey)
    {

        $builder
            ->innerJoin('p.ProductClasses', 'pc1');
//            ->innerJoin('pc1.ClassCategory1', 'pc_ct1');

        if ($params['price_min']){
            $builder
                ->andWhere('pc1.price02 >= :min_price02')
                ->setParameter('min_price02', $params['price_min'])
                ->andWhere('pc1.visible = true')
                ->andWhere('pc1.stock > 0 OR pc1.stock_unlimited = true')
            ;

        }

        if ($params['price_max'] && $params['price_max']<10000){
            $builder
                ->andWhere('pc1.price02 <= :max_price02')
                ->setParameter('max_price02', $params['price_max'])
                ->andWhere('pc1.visible = true')
                ->andWhere('pc1.stock > 0 OR pc1.stock_unlimited = true')
            ;
        }

        if (!empty($params['class_category_ids'])){
            $builder
                ->innerJoin('pc1.ClassCategory1', 'pc_ct1')
                ->andWhere($builder->expr()->in('pc_ct1.id', ':class_category_ids'))
                ->setParameter('class_category_ids', explode(',', $params['class_category_ids']))
                ->andWhere('pc1.visible = true')
                ->andWhere('pc1.stock > 0 OR pc1.stock_unlimited = true')
            ;
        }

        if (!empty($params['tag_ids'])){
            $searchTags = explode(',', $params['tag_ids']);
            $tagInfo = [];
            foreach ($searchTags as $item){
                $itemAry = explode('_', $item);
                $tagInfo[$itemAry[0]][] = $itemAry[1];
            }

            $ii=0;
            foreach ($tagInfo as $item){
                $ii++;
                $ProductTags = $this->productTagRepository->createQueryBuilder('pt')
                    ->leftJoin('pt.Tag', 't')
                    ->where($builder->expr()->in('t.id', ':tag_ids'))
                    ->setParameter('tag_ids', $item)->getQuery()->getResult()
                ;
                $Products = [];
                foreach ($ProductTags as $ProductTag){
                    $Product = $ProductTag->getProduct();
                    $ProductClasses = $this->productClassRepository->createQueryBuilder('pc')
                        ->where('pc.stock > 0 OR pc.stock_unlimited = true')
                        ->andWhere('pc.visible = true')
                        ->andWhere('pc.Product = :Product')->setParameter('Product', $Product)
                        ->getQuery()->getResult()
                    ;

                    if (count($ProductClasses)>0)
                        $Products[] = $Product;
                }
                $builder
                    ->andWhere($builder->expr()->in('p', ':Products'.$ii))
                    ->setParameter('Products'.$ii, $Products);

            }

        }

        if (!empty($params['member_ids'])){
            $builder
                ->innerJoin('pc1.Member', 'pc_member')
                ->andWhere($builder->expr()->in('pc_member.id', ':member_ids'))
                ->setParameter('member_ids', explode(',', $params['member_ids']))
                ->andWhere('pc1.visible = true')
                ->andWhere('pc1.stock > 0 OR pc1.stock_unlimited = true');
        }


    }
    /**
     * カスタマイズ対象のキーを返します。
     *
     * @return string
     */
    public function getQueryKey()
    {
        return QueryKey::PRODUCT_SEARCH;
    }
}
